version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: console-capture-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: console_capture
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: console-capture-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: console-capture-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MeiliSearch (Alternative to Elasticsearch)
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: console-capture-meilisearch
    environment:
      MEILI_MASTER_KEY: masterKey
      MEILI_ENV: development
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: console-capture-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
    container_name: console-capture-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: console_capture
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      MEILISEARCH_HOST: http://meilisearch:7700
      MEILISEARCH_API_KEY: masterKey
      S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET_NAME: console-capture-recordings
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - minio
    volumes:
      - ./packages/backend:/app/packages/backend
      - /app/packages/backend/node_modules
    command: npm run dev

  # MCP Local Server (stdio transport)
  mcp-local:
    build:
      context: .
      dockerfile: ./packages/mcp-local/Dockerfile
    container_name: console-capture-mcp-local
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      REDIS_HOST: redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./packages/mcp-local:/app/packages/mcp-local
      - /app/packages/mcp-local/node_modules

  # MCP Cloud Server (HTTP/SSE transport)
  mcp-cloud:
    build:
      context: .
      dockerfile: ./packages/mcp-cloud/Dockerfile
    container_name: console-capture-mcp-cloud
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ./packages/mcp-cloud:/app/packages/mcp-cloud
      - /app/packages/mcp-cloud/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  meilisearch_data:
  minio_data:

networks:
  default:
    name: console-capture-network
